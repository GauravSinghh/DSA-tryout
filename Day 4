RECURSION
=========
Print 1 To N Without Loop
Difficulty: BasicAccuracy: 61.33%Submissions: 299K+Points: 1
Print numbers from 1 to n without the help of loops. You only need to complete the function printNos() that takes n as a parameter and prints the number from 1 to n recursively.

Note: Don't print any newline, it will be added by the driver code.

Examples:

Input: n = 10
Output: 1 2 3 4 5 6 7 8 9 10
Input: n = 5
Output: 1 2 3 4 5
Input: n = 1
Output: 1
Constraints:
1 <= n <= 1000

ANSWER: 
class Solution {

    public void printNos(int n) {
        showNum(1,n);
    }
    
    public void showNum(int i, int n){
        if(i>n) return;
        System.out.print(i+" ");
        showNum(i+1,n);
    }
}

BETTER APPROACH:::
class Solution {

    public void printNos(int n) {
        if(n==0) return;
        printNos(n-1);
        System.out.print(n+ " ");
    }

}

==============================================================================================================================================================================

Print GFG n times
Difficulty: EasyAccuracy: 75.76%Submissions: 113K+Points: 2Average Time: 10m
Print GFG n times without the loop.

Example:

Input:
5
Output:
GFG GFG GFG GFG GFG
Your Task:
This is a function problem. You only need to complete the function printGfg() that takes N as parameter and prints N times GFG recursively. Don't print newline, it will be added by the driver code.


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N) (Recursive).

Constraint:
1<=N<=1000

ANSWER:: class Solution {

    void printGfg(int N) {
        // code here
        if(N==0) return;
        System.out.print("GFG ");
        printGfg(N-1);
    }
}

======================================================================================================================================================

Print N to 1 without loop
Difficulty: EasyAccuracy: 77.72%Submissions: 109K+Points: 2Average Time: 10m
Print numbers from N to 1 (space separated) without the help of loops.

Example 1:

Input:
N = 10
Output: 10 9 8 7 6 5 4 3 2 1
Your Task:
This is a function problem. You only need to complete the function printNos() that takes N as parameter and prints number from N to 1 recursively. Don't print newline, it will be added by the driver code.


Expected Time Complexity: O(N).
Expected Auxiliary Space: O(N) (Recursive).

Constraint
1<=n<=1000

ANSWER: 
class Solution {

    void printNos(int N) {
        // code here
        if(N==0) return;
        System.out.print(N+" ");
        printNos(N-1);
    }
}

===========================================================================================================================================================================

Sum of first n terms
Difficulty: BasicAccuracy: 23.17%Submissions: 186K+Points: 1
Given an integer n, calculate the sum of series 13 + 23 + 33 + 43 + â€¦ till n-th term.

Examples:

Input: n = 5
Output: 225
Explanation: 13 + 23 + 33 + 43 + 53 = 225
Input: n = 7
Output: 784
Explanation: 13 + 23 + 33 + 43 + 53 + 63 + 73 = 784
Constraints:
1 <= n <= 200 


ANSWER:  class Solution {
    int sumOfSeries(int n) {
        if(n==0) return 0;
        return n*n*n+sumOfSeries(n-1);
    }
}

