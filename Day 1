Count Digits
Difficulty: EasyAccuracy: 30.45%Submissions: 455K+Points: 2
Given a positive integer n, count the number of digits in n that divide n evenly (i.e., without leaving a remainder). Return the total number of such digits.

A digit d of n divides n evenly if the remainder when n is divided by d is 0 (n % d == 0).
Digits of n should be checked individually. If a digit is 0, it should be ignored because division by 0 is undefined.

Examples :

Input: n = 12
Output: 2
Explanation: 1, 2 when both divide 12 leaves remainder 0.
Input: n = 2446
Output: 1
Explanation: Here among 2, 4, 6 only 2 divides 2446 evenly while 4 and 6 do not.
Input: n = 23
Output: 0
Explanation: 2 and 3, none of them divide 23 evenly.
Constraints:
1<= n <=105



ANSWER: class Solution {
    static int evenlyDivides(int n) {
        // code here        
        if(n<1) return 0;
        int count = 0;
            count = (int) String.valueOf(n) // Convert number to string
            .chars() // Convert to IntStream (ASCII codes)
            .map(Character::getNumericValue) // Convert ASCII to actual digits
            .filter(digit -> digit > 0 && n % digit == 0) // Filter digits that divide n
            .count(); // Count valid digits

        return count;
    }
}


=======================================================================================================================================================

7. Reverse Integer
Solved
Medium
Topics
Companies
Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
 

Constraints:

-231 <= x <= 231 - 1


ANSWER: 
class Solution {
    public int reverse(int x) {
        int n = x;
        long res = 0;
        while(n!=0){
            res = (res*10)+n%10;
            n /=10;
            // if((res)>=Integer.MAX_VALUE/10-dig || (res) <=Integer.MIN_VALUE/10-dig ) return 0;
        }
        return (res>Integer.MAX_VALUE || res<Integer.MIN_VALUE) ? 0: (int) res;
    }
}
