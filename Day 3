LCM And GCD
Difficulty: BasicAccuracy: 37.02%Submissions: 207K+Points: 1
Given two integers a and b, the task is to compute their LCM and GCD and return an array containing their LCM and GCD.

Examples:

Input: a = 5 , b = 10
Output: [10, 5]
Explanation: LCM of 5 and 10 is 10, while their GCD is 5.
Input: a = 14 , b = 8
Output: [56, 2]
Explanation: LCM of 14 and 8 is 56, while their GCD is 2.
Input: a = 1 , b = 1
Output: [1, 1]
Explanation: LCM of 1 and 1 is 1, while their GCD is 1.
Constraints:
1 <= a, b <= 109

ANSWER: 
class Solution {
    public static int[] lcmAndGcd(int a, int b) {
        // code here
        int gcd = findGd(a, b);
        int lcm = a*b/gcd;
        
        return new int[]{lcm,gcd};
        
    }
    
    public static int findGd(int a, int b){
        
        while(b!=0){
            int tem = b;
            b= a%b;
            a=tem;
        }
        return a;
    }

}

========================================================================================================================================================================================

Armstrong Numbers
Difficulty: EasyAccuracy: 49.88%Submissions: 175K+Points: 2
You are given a 3-digit number n, Find whether it is an Armstrong number or not.

An Armstrong number of three digits is a number such that the sum of the cubes of its digits is equal to the number itself. 371 is an Armstrong number since 33 + 73 + 13 = 371. 

Examples:

Input: n = 153
Output: true
Explanation: 153 is an Armstrong number since 13 + 53 + 33 = 153. 
Input: n = 372
Output: false
Explanation: 372 is not an Armstrong number since 33 + 73 + 23 = 378. 
Input: n = 100
Output: false
Explanation: 100 is not an Armstrong number since 13 + 03 + 03 = 1. 
Constraints:
100 ≤ n <1000 

ANSWER: class Solution {
    static boolean armstrongNumber(int n) {
        // code here
        int x = n;
        int res = 0;
        
        while(x!=0){
            int rem = x%10;
            x /=10;
            res += Math.pow(rem,3);
        }
        return res==n;
    }
}

===========================================================================================================================================================================================


Sum 1 to n Divisors
Difficulty: EasyAccuracy: 43.37%Submissions: 210K+Points: 2
Given a positive integer n, The task is to find the value of Σi F(i) where i is from 1 to n and function F(i) is defined as the sum of all divisors of i.

Examples:

Input: n = 4
Output: 15
Explanation:
F(1) = 1
F(2) = 1 + 2 = 3
F(3) = 1 + 3 = 4
F(4) = 1 + 2 + 4 = 7
So, F(1) + F(2) + F(3) + F(4)
    = 1 + 3 + 4 + 7 = 15
Input: n = 5
Output: 21
Explanation:
F(1) = 1
F(2) = 1 + 2 = 3
F(3) = 1 + 3 = 4
F(4) = 1 + 2 + 4 = 7
F(5) = 1 + 5 = 6
So,  F(1) + F(2) + F(3) + F(4) + F(5)
    = 1 + 3 + 4 + 7 + 6 = 21
Input: n = 1
Output: 1
Explanation:
F(1) = 1
So,  F(1) = 1 
Constraints:
1 <= n <= 105

ANSWER: class Solution {
    public static int sumOfDivisors(int n) {
        // code here
        int res = 0;
        for(int i =1;i<=n;i++){
            int f = 0;
            for(int j=1;j<=i;j++){
                if(i%j==0){
                    f+=j;
                }
            }
            res +=f;
        }
        return res;
    }
}

++++++++++++++++++++ ANother Approach+++++++++++
class Solution {
    public static int sumOfDivisors(int n) {
        int res = 0;
        
        for (int i = 1; i <= n; i++) {
            res += i * (n / i); // Add i multiplied by how many times it appears as a divisor
        }
        
        return res;
    }
}
